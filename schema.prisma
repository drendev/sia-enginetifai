// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

// User table
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  picture   String   @default("test")
  role      String   @default("user")
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relational Tables
  engines      Engine[]
  transactions Transaction[]
  userInfo     UserInfo?
}

model UserInfo {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
  fullName String
  sex      String
}

// Engines
model Engine {
  id          Int      @id @default(autoincrement())
  userAdded   User     @relation(fields: [userName], references: [username])
  userName    String
  engineName  String   @unique
  engineType  String
  quantity    Int
  price       Float
  picture     String   @default("test")
  description String
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relational Tables
  transactions  TransactionEngine[]
  specification Specification?

  @@unique([id, engineName])
}

model Specification {
  id                Int     @id @default(autoincrement())
  engine            Engine  @relation(fields: [engineId, engineName], references: [id, engineName], onDelete: Cascade)
  engineId          Int     @unique
  engineName        String  @unique
  BorexStroke       String?
  Displacement      String?
  DislacementBore   String?
  EngineSpeed       String?
  RatedOutput       String?
  MaxOutPut         String?
  LubeOilCapacity   String?
  FuelTankCapacity  String?
  FuelConsumption   String?
  Dimension         String?
  NetWeight         String?
  NetPower          String?
  PackageDimension  String?
  GrossWeight       String?
  LoadingQty        String?
  RateACOutput      String?
  MaxACOutput       String?
  Noise             String?
  StartingSystem    String?
  Frequency         String?
  PowerFactor       String?
  EngineModel       String?
  EngineType        String?
  DCOutput          String?
  Voltage           String?
  Inlet             String?
  MaxCapacity       String?
  MaxDischarge      String?
  SelfPrimingTime   String?
  MaxSuctionHead    String?
  Kw3600            String?
  Kw3000            String?
  Kw2600            String?
  MaxNetTorque      String?
  CompressionRatio  String?
  IdleSpeed         String?
  EngineOilCapacity String?
  Size              String?
  ContinuousOpHours String?
  Type              String?
  RunningTime       String?
  Optional          String?
  NoLoadVoltage     String?
  OperatingWelding  String?
  OperatingCurrent  String?
  MaxArcingCurrent  String?
  DutyCycle         String?
  EngineRatedPower  String?
  TillingWidth      String?
  TransmissionMode  String?
  Weight            String?
  PackingSize       String?
  TillingDepth      String?
  ShiftingGears     String?
  TransportingWheel String?
  TillingBlades     String?
  ContLoad20        String?
  ContLoad40        String?

  @@unique([engineId, engineName])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [transactionUser], references: [username])
  transactionUser String
  engineName      String[]
  quantity        Int[]
  totalPrice      Float
  paymentMethod   String
  delivery        Boolean
  deliveryDate    String
  createAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relational Tables
  deliveryInformation Delivery[]

  @@unique([id, transactionUser, paymentMethod, deliveryDate])
}

model TransactionEngine {
  id         Int      @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  engine     Engine[]
  createAt   DateTime @default(now())
}

model Delivery {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId, transactionBy, paymentMethod, deliveryDate], references: [id, transactionUser, paymentMethod, deliveryDate])
  transactionId Int
  transactionBy String
  paymentMethod String
  deliveryDate  String
  deliveryTime  String
  address       String
  city          String
  latitude      Decimal
  longitude     Decimal
  deliveryUser  String
  deliverStatus String
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
